int i = 0;
while(true) {
	cur = readstdin;
	if (cur == 0xFFFF)
		return;
	m[i] = cur;
	print cur;
	
	(i % 4 is eqvualent to i & (4 - 1) for powers of 2 only)
	if (i % 4 == 3) {
		parCalc;
	i++;
}

load base, 0x40
loadaddr idx ,0
load const1, 0xFE
load size, 3

main:	

load cur, 0xFF /* read form stdin */
xor temp, cur, const1 / cur == 0xFFFF? */
bzero temp, halt /* end if cur == 0xFFF */ 
store cur, 0xFF /* print out cur */
add temp, base, idx /* temp = base + idx */
sind cur, 0, temp /* store cur into mem[base + idx] */
and temp, idx, size /* temp = idx & 3 same as idx % 4 */
xor temp, temp, size /* idx % 4 == 3? */
bzero temp, parCalc
add idx, idx, 1
j main

parCalc:
	pa = m[0] ^ m[1] ^ m[2] ^ m[3];
	pa = 0;
	for(int i = 0; i < 4; i++) 
		pa ^= m[i] 
	
	loadaddr pa, 0 // pa = 0
	loadaddr idx, 0 // idx = 0
	load size, 4 // size = 4
loop:
	xor temp, idx, size // idx == size ?
	bzero temp, loop2 // jump to loop2
	add temp, base + idx 
	load temp, temp  // temp = mem[base + idx]
	xor pa, pa, temp // pa ^= m[base + idx]
	add idx, idx, 1 // i++
	j loop
	
	p[0] = pa ^ m[2]
	p[1] = pa ^ m[1]
	p[2] = pa ^ m[0]
	for(int i = 0; i < 3; i++) {
		temp = pa ^ m[2 - i];
		print temp 
	}
	
	loadaddr idx, 0
	loadaddr size, 3
	loadaddr size2, 2
loop2:
	xor temp, idx, size // idx == size?
	bzero temp, main // jump back to main
	sub temp, size2, idx // temp = 2 - idx
	load temp, temp // temp = mem[2 - idx]
	xor temp, temp, pa // temp = pa ^  mem[2 - idx]
	store temp, 0xFF //print to stdout
	add idx, idx, 1 //i++
	j loop2