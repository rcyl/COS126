/*
 * Term.h
 *
 *  Created on: Aug 12, 2018
 *      Author: rcyl
 */

#ifndef TERM_H_
#define TERM_H_

#pragma once

#include <string>

class Term{
private:
	std::string query;
	long weight;
public:
	struct ReverseweightOrder {
		bool operator() (const Term& lhs, const Term& rhs) const {
			return rhs.weight > lhs.weight;
		}
	};
	struct ByPrefixOrder {
		ByPrefixOrder(int r) { this-> r = r; }
		bool operator()(const Term& lhs, const Term& rhs) const {
			std::string sublhs = lhs.query.substr(0, r);
			std::string subrhs = rhs.query.substr(0, r);
			return (sublhs < subrhs);
		}
		int r;
	};
	Term(const std::string &query, long weight);
	std::string toString();
	bool operator<(const Term &lhs) const;
};






#endif /* TERM_H_ */
