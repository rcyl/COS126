edited 24th july 2018

/* register map */

r0 = 0
r1 = temp
r2 = shift
r3 = mor
r4 = ma
r5 = pa
r6 = mi
r7 = pi
r8 = i
r9 = len
rA = 
rB = 
rC = 
rD = 
rE = 
rF =

p1 = (m1 ^ m2 ^ m3 ^ m4) ^ m3 =
		m1 ^ m2 ^ m4 
		
mi => message bit at position i, ie m3 is at bit 2 */
mor => xor of all input msg bits

/NOTE THE ORDER OF THE BITS/
pa => mask of bits to be corrected /* p1 p2 p3 */
ma  => bit shifted sum of all msg bits /* m4 m3 m2 m1 */ 

****/

pa = 0
mor = 0
ma = 0
mask1 = 1
mask8 = 8
i = 0

main:
	i = 3
	get&shift(0)
	get&shift(1)
	get&shift(2)
	get&shift(3)
	
	i = 2
	comp&shift(2)
	comp&shift(1)
	comp&shift(0)
	
	ma = ma ^ pa // to correct flipped bits
	
	print(0)
	print(1)
	print(2)
	print(3)
	j main

halt:
	0

get&shift():     
	mi => read frm stdin
	temp = mi & mask8
	bpostv temp halt //check for FFFF, well just bit 3 
	mor =>  mor ^ mi
	temp = (1 << shift)
	ma = ma + temp
	i = i - 1
	bzero i comp&shift
	j get&shift
			
comp&shift():
	input_parity => read from stdin
	mi = ma >> shift 
	mi = temp & 1
	calc_parity = mor ^ mi 
	temp = (calc_parity == recv parity)
	if (temp != 0) //calc parity differs from recv parity
		temp << (1 << shift)
		pa += temp 
		
print(shift)
	temp = ma >> shift
	mi = temp & 1
	print mi
	



*/

