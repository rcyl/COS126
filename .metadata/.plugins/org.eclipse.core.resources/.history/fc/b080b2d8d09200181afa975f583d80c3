/*
 * lfsr.cpp
 *
 *  Created on: Jul 29, 2018
 *      Author: rcyl
 */

#include <iostream>
#include <stdexcept>
#include "lfsr.h"

LFSR::LFSR() { seed = ""; tap = 0; len = 0; cur = 0;}

LFSR::LFSR(std::string seed, int tap)
			:seed(seed), tap(tap) {

	len = seed.length();
	if (len > MAXLEN) {
		throw std::invalid_argument("Unsupported length");
	}
	if (tap >= len) {
		throw std::invalid_argument
		("tap position can't be higher than len");
	}

	cur = (uint32_t) stoi(seed, nullptr, 2);
}

LFSR::~LFSR() {}

int LFSR::length() { return len; }

inline int LFSR::bitAt(int i) {

	uint32_t mask = (1 << i);
	return (cur & mask) >> i;
}

std::string LFSR::toString() {

	std::string str;

	for(int i = this->len; i >= 0; i--) {
		str.append(std::to_string(this->bitAt(i)));
	}
	return str;
}

int LFSR::step() {

	int msb =  this->bitAt(len - 1);
	int res = msb ^ this->bitAt(tap);
	cur <<= 1;

	return 0;
}




