
/* register map */

r0 = 0
r1 
r2 
r3 
r4 
r5
r6
r7
r8
r9 = 
rA = 
rB =
rC = 
rD = 
rE = 
rF = 

/* mem map, put in program */

mem[0x40] =  /0x40 to 0x43 reserved for m /
mem[0x44] = 0x03 (011) // pmask
mem[0x45[ = 0x05 (101)
mem[0x46] = 0x05 (110)
mem[0x47] = 0x07 (111)
mem[FE] = 0xFFFF /* put constant into memory */

/* "load address" is anything, but "load" deferences memory */

load const1, 0xFE
load one, 0x1
load four, 4
load three, 3
load mbase, 0x40
load pbase, 0x044

while(true) {
	
	i = 0;
	do {
		cur = stdin.read
		if (cur == 0xFF) exit
		
		m[i] = cur;
	} while ( i < 4)
	
	i = 0;
	do {
		cur = stdin.read
		if (cur == 0xFF) exit
		pa |= cur << idx
	} while (i < 3)
	
	i = 0;
	pa = 0;
	do {
		if (pa & pm[i]) {
			m[i] = ~m[i]
			break;
		}
	
	} while (i < 4)
	
	i = 0;
	print
}

main:
	load idx, 0
	mread
	
	load idx, 0
	pread
	
	load idx, 0
	load pa, 0
	pcorrect
	
	load idx, 0
	print
	j main

mread
	jal ra, readcheck
	add temp, mbase, idx
	sind cur, 0, temp
	add idx, idx, one
	sub temp, four, idx
	bpos temp, mread

pread
	jal ra, readcheck
	sl temp, cur, idx 
	xor pa, pa, cur
	add idx, idx, one
	sub temp, three, idx
	bpos temp, mread
	
pcorrectmod
	xor temp, pa, mask3
	bzero temp, flipm0
	xor temp, pa, mask3
	bzero temp, flipm0
	xor temp, pa, mask3
	bzero temp, flipm0
	xor temp, pa, mask3
	bzero temp, flipm0

flipm0
	xor m0, m0, 1
	print

flipm0
	xor m1, m1, 1
	print

flipm2
	xor m2, m1, 1
	print

flipm3
	xor m3, m0, 1
	print

print 
	store m0, 0xFF
	store m1, 0xFF
	store m2, 0xFF
	store m3, 0xFF

	
pcorrect
	add temp, idx, pbase // temp = pbase + idx
	lind temp, 0, temp // temp = mem[pbase + idx]
	xor temp, pa, temp // temp = pa ^ mem[pbase + idx]
	bzero temp, flip
	add idx, idx, one
	sub temp, four, idx
	bpos temp, pcorrect

print:
	load idx, 0
printloop:
	add temp, idx, mbase // temp = mbase + mdx
	lind temp, 0, temp // load mem[mbase + idx] to tmp
	load temp, 0xFF //print
	add idx, idx, one
	sub temp, four, idx
	bpos temp, printloop
j main
	
readcheck
	load cur, 0xFF /* read form stdin */
	xor temp, cur, const1 / temp = (cur == 0xFFFF) */
	bzero temp, halt /* end if cur == 0xFFFF */ 
	j ra
	
flip
	add loc, idx, mbase // mbase + idx
	lind temp, 0, loc // temp = mem[mbase + idx]
	xor temp, temp, one // temp = ~temp
	sind temp, 0, loc // mem[mbase + idx] = temp
	j print
halt:
	0000