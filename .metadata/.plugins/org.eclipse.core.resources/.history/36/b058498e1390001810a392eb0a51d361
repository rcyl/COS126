edited 24th july 2018

/* register map */

r0 = 0
r1 = temp
r2 = shift
r3 = mor
r4 = ma
r5 = pa
r6 = mi
r7 = pi
r8 = i
r9 = 
rA = 
rB = 
rC = 
rD = 
rE = 
rF =

p1 = (m1 ^ m2 ^ m3 ^ m4) ^ m3 =
		m1 ^ m2 ^ m4 

store m1 to m4 in array
xor m1 to m4 together to get mor

calcpi => calculated parity
cmpi => compared parity

set onepass = 0
set i == 2
read pi
get calcpi by xor mor ^ m[2 - i]
get cmpi by comparing pi with calcpi
if cmpi == 1, set onepass = 0 flip M[2 - i] aka M[2 - i] ^ 1
i--
repeat till i = 0
if onepass = 0, flip M[3] 
		

****/

mor = 0
mask1 = 1
mask2 = 2
mask3 = 3
mask8 = 8

main:
	i = 3
get: (0, 1, 2, 3)
	mi => read frm stdin
	temp = mi & mask8
	bpostv temp halt //check for FFFF, well just bit 3 
	mor =>  mor ^ mi
	idx = 3 - i
	M[idx] = mi
	i = i - 1
	bpos get
	
	i = 2		
flip: (2, 1, 0)
	pi => read from stdin
	mi = M[i]
	cp = mor ^ mi 
	temp = (cp == pi)
	
		
	i = i - 1
	bzero pos, comp&shift
	
	
	i = 3	
print
	idx = 3 - i
	mi = M[idx]
	print mi
	i = i - 1
	bpos, print
	j main
	
halt:
	0
		


*/

