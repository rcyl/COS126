/*
 * main.c
 *
 *  Created on: Sep 10, 2018
 *      Author: rcyl
 *
 *     See COS226 Assignment Seam Carving
 */

#include <iostream>
#include <limits>
#include <algorithm>

#define ROWS	5
#define COLS	6


typedef struct node {
	double minVal; /* min value of this current node */
	double curVal; /* energy it takes to get here */
} node_t;


void getMin(int i, int j, node_t pixels[][], double min[][]) {

	if (i < 0 || i > ROWS) return;
	if (j < 0 || j > COLS) return;

	/* check is already memoized */
	if (min[i][j] != 0) {
		pixels[i][j].minVal = min[i][j];
		return;
	}

	/* first row, all min values are same as curVal */
	if (i == 0) {
		pixels[i][j].minVal = pixels[i][j].curVal;
		return;
	}

	pixels[i][j].minVal = min

}

int main() {

	double energy[ROWS][COLS] = {
		{ 240.18, 225.59, 302.27, 159.43, 181.81, 192.99 },
		{ 124.18, 237.35, 151.02, 234.09, 107.89, 156.67 },
		{ 111.10, 138.69, 228.10, 133.07, 211.51, 143.75 },
		{ 130.67, 153.88, 174.01, 284.01, 194.50, 213.53 },
		{ 179.82, 175.49, 70.06,  270.80, 201.53, 191.29 }
	};

	node_t pixels[ROWS][COLS];
	double min[ROWS][COLS] = {0};

	for(int i = 0; i < ROWS; i++) {
		for(int j = 0; j < COLS; j++) {
			pixels[i][j].minVal = std::numeric_limits<double>::max();
			pixels[i][j].curVal= energy[i][j];
		}
	}


}

