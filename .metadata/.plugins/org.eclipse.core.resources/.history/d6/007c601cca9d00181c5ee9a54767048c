/*
 * Term.h
 *
 *  Created on: Aug 12, 2018
 *      Author: rcyl
 */

#ifndef TERM_H_
#define TERM_H_

#pragma once

#include <string>

class Term{
private:
	std::string str;
	long weight;
public:
	Term(const std::string& query, long weight);
	std::string toString();
	bool operator<(const Term &lhs) const;
};

struct ReverseweightOrder {
	bool operator() (const Term& lhs, const Term& rhs) const {
		return rhs.weight > lhs.weight;
	}
};

struct ByPrefixOrder {
	ByPrefixOrder(int r) { this-> r = r; }
	bool operator()(const Term& lhs, const Term& rhs) const {
		std::string sublhs = lhs.str.substr(0, r);
		std::string subrhs = rhs.str.substr(0, r);
		return (sublhs < subrhs);
	}
	int r;
};




#endif /* TERM_H_ */
