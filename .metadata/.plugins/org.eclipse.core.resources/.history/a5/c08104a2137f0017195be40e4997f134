/*
 * toy.cpp
 *
 *  Created on: 7 Aug, 2017
 *      Author: rcyl
 */

#include <iostream>
#include <cstring>
#include <string>
#include "toy.h"

#define PRINT(msg) std::cout << msg << std::endl;

Toy::Toy(std::ifstream & prog) : prog(prog)
{
	pc = 0x10;
	memset(reg, 0, 16);
	memset(mem, 0, 256);

	std::string line;
	if (prog.is_open()) {
		while(getline(prog, line)) {
			std::cout << line << std::endl;
		}
	}
	prog.close();
}

void Toy::runProgram(std::istream & stdin, std::ostream & stdout) {

	std::string line;

	for(int i = pc; i < 0xFF && getline(prog, line); i++)
		mem[i] = (uint16_t) std::stoi(line, nullptr, 16);

	while(true) {
		uint16_t ir = mem[pc++];

		uint16_t op = (ir << 12) & 0xF;
		uint16_t d = (ir << 8) & 0xF;
		uint16_t s = (ir << 4) & 0xF;
		uint16_t t = (ir << 0) & 0xF;
		uint16_t addr = (ir << 0) & 0xFF;
		if (op == 0) break; /* halt */

		switch(op) {

			case 0x1: reg[d] = reg[s] + reg[t]; break;
			case 0x2: reg[d] = reg[s] - reg[t]; break;
			case 0x3: reg[d] = reg[s] & reg[t]; break;
			case 0x4: reg[d] = reg[s] ^ reg[t]; break;
			case 0x5: reg[d] = reg[s] << reg[t]; break;
			case 0x6: reg[d] = reg[s] >> reg[t]; break;
			case 0x7: reg[d] = addr; break;
			case 0x8:
				if (addr == 0xFF)
					stdout << reg[d]; /* write to stdout */
				else
					reg[d] = mem[addr];
				break;
			case 0x09:
				if (addr == 0xFF) { /* read from stdin */
					getline(stdin, line);
					reg[d] = (uint16_t) std::stoi(line, nullptr, 16);
				}
				else {
					mem[addr] = reg[d];
				}
				break;
			case 0xA:
				if (reg[t] == 0xFF)
					stdout << reg[d];
				else
					reg[d] = mem[reg[t]]; break;
			case 0xB:
				mem[reg[t]] = reg[d]; break;
			case 0xC:
				if (reg[d] == 0) pc = addr; break;
			case 0xD:
				if (reg[d] > 0) pc = addr; break;
			case 0xE:
				pc = reg[d]; break;
			case 0xF: /* store address of "next" pc (since pc++ above) into reg, and jumps into addr*/
				reg[d] = pc; pc = addr; break;
		}
	}

}
